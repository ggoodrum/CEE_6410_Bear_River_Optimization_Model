library(car)
set.seed(145)
anesimp <- read.dta("anesimputation.dta",
convert.factors = FALSE, missing.type = TRUE)
anesimp <- read.data("anesimputation.dta",
convert.factors = FALSE, missing.type = TRUE)
library(dplyr)
library(mice)
library(foreign)
library(car)
require(rrcovNA)
install.packages(rrcovNA)
install.packages('rrcovNA')
require(rrcovNA)
library(rrcovNA)
data(bush10)
bush10
> head(bush10)
head(bush10)
impSeqRob(bush10)
str(bush10)
library(NADA)
x <- c(63,78,89,32,77,96,87,67,28,80,100,85,45,92,74,63,42,73,83,87)
cens <- c(F,F,F,T,F,F,F,F,T,F,F,F,T,F,F,F,T,F,F,F)
Cens <- data.frame(x=x,cens=cens)
x.cen <- censummary(Cens$x,Cens$cens)
x.ros <- ros(Cens$x,Cens$cens)
x.ros
log(11.6)
library(NADA)
Hg
data(NADA.HgFish)
print(NADA::censtats(Hg$`Hg (μg/L)`,Hg$Cen))
censtats(dat.stack)
1/12
18/12
22.25/12
24.75/12
24/12
10/12
17.25/12
17.5/12
18.25/12
14.75/12
2/12
15/12
21/12
23/12
22/12
13/12
15/12
10/12
2/10
2/12
17/12
22/12
28/12
15/12
16/12
19/12
19/12
16/12
20.5/12
# -------------------------------------------------------------------------- #
# Problem 3
# Clear workspace
rm(list=ls())
# Load packages
# if(!require("FrF2")){
#   install.packages("FrF2", dependencies = T); library(FrF2)}
# Enter data
tm <- c(0.25, 0.5, 1.0, 1.3, 1.8, 2.0, 2.6, 3.0, 4.0, 5.0, 6, 8.0, 9, 9.5, 10, 11, 13)
Y <- c(0.5, 1, 1.1, 1.5, 2.1, 2.5, 3.0, 3.5, 4.4, 6.5, 0, 13.5, 15, 15.5, 16, 16.2, 17)
dat <- data.frame(cbind(tm, Y))
# a. Plot the raw data
# windows()
plot(Y ~ tm, data = dat, pch = 19, xlim = c(0,14), ylim = c(0, 18),
xaxs = 'i', yaxs = 'i',
xlab = 'Time', ylab = 'Algae Concentration')
# b. Get parameter estimates. Explained in handout 'Use of derivatives in R'
# Theta 1: If t approaches infinity, T1 is approximately equal to the largest Y value
T1.start <- max(dat$Y)
T3.start <- 0.0256
T2.start <- 1/(T1.start*T3.start)
y.d1f <- deriv(y~T1 - (T1+T2)/(1+T2/T1*exp((T1+T2)*T3*tm)),c('tm'),c('T1','T2','T3'),func=T)
y.d2f <- deriv(y.d1,c('tm'),c('T1','T2','T3'),func=T)
# Enter data
tm <- c(0.25, 0.5, 1.0, 1.3, 1.8, 2.0, 2.6, 3.0, 4.0, 5.0, 6, 8.0, 9, 9.5, 10, 11, 13)
Y <- c(0.5, 1, 1.1, 1.5, 2.1, 2.5, 3.0, 3.5, 4.4, 6.5, 0, 13.5, 15, 15.5, 16, 16.2, 17)
dat <- data.frame(cbind(tm, Y))
# Enter model
y ~ T1 - (T1+T2)/(1+T2/T1*exp((T1+T2)*T3*tm))
# The model as a function
y.a <- as.function(alist(tm=,T1=,T2=,T3=,T1 - (T1+T2)/(1+T2/T1*exp((T1+T2)*T3*tm))))
y.ac <- Body <- body(y.a)
Args <- args(y.a)
y.ae <- as.expression(y.ac)
# Determine any order derivative >= 1
DD <- function(expr, name, order = 1) {
if(order < 1) stop("'order' must be >= 1")
if(order == 1) D(expr, name)
else DD(D(expr, name), name, order - 1)
}
# DD produces a 'call' - similar to a function but more compact
y.d1 <- DD(y.ae,'tm',order=1)
y.d2 <- DD(y.ae,'tm',order=2)
# derivative evaluation, x is T2, and T1, T3, and tm are defined in the .GlobalEnv
# 1st derivative wrt tm for a given T2
y.e1 <- function(x) {
assign('T2',x,envir=.GlobalEnv)
return(eval(y.d1))
}
# 2nd derivative wrt tm for a given T2
y.e2 <- function(x) {
assign('T2',x,envir=.GlobalEnv)
assign('T3',s0/(T1*T2),envir=.GlobalEnv)
return(eval(y.d2))
}
# 2nd derivative wrt tm for a given tm
y.eTm <- function(x) {
assign('tm',x,envir=.GlobalEnv)
return(eval(y.d2))
}
# Creates functions for 1st and 2nd derivatives
y.d1f <- deriv(y~T1 - (T1+T2)/(1+T2/T1*exp((T1+T2)*T3*tm)),c('tm'),c('T1','T2','T3'),func=T)
y.d2f <- deriv(y.d1,c('tm'),c('T1','T2','T3'),func=T)
?y.d2f
# Problem 3
# Clear workspace
rm(list=ls())
# Load packages
# if(!require("FrF2")){
#   install.packages("FrF2", dependencies = T); library(FrF2)}
# Enter data
tm <- c(0.25, 0.5, 1.0, 1.3, 1.8, 2.0, 2.6, 3.0, 4.0, 5.0, 6, 8.0, 9, 9.5, 10, 11, 13)
Y <- c(0.5, 1, 1.1, 1.5, 2.1, 2.5, 3.0, 3.5, 4.4, 6.5, 0, 13.5, 15, 15.5, 16, 16.2, 17)
dat <- data.frame(cbind(tm, Y))
# a. Plot the raw data
# windows()
plot(Y ~ tm, data = dat, pch = 19, xlim = c(0,14), ylim = c(0, 18),
xaxs = 'i', yaxs = 'i',
xlab = 'Time', ylab = 'Algae Concentration')
# b. Get parameter estimates. Explained in handout 'Use of derivatives in R'
# Theta 1: If t approaches infinity, T1 is approximately equal to the largest Y value
T1.start <- max(dat$Y)
T3.start <- 0.0256
T2.start <- 1/(T1.start*T3.start)
T2.start
1/(17*2.302)
# Theta 1: If t approaches infinity, T1 is approximately equal to the largest Y value
T1.start <- max(dat$Y)
T2.start <- 2.302
T3.start <- 1/(T1.start*T2.start)
frm1 <- Y ~ T1 - (T1+T2)/(1+T2/T1*exp((T1+T2)*T3*tm))
nls.frm1 <- nls(formula = frm1, data = dat, start = list(T1 = T1.start, T2 = T2.start, T3 = T3.start))
summary(nls.frm1)
T3.start
y.a <- as.function(alist(tm=,T1=,T2=,T3=,T1 - (T1+T2)/(1+T2/T1*exp((T1+T2)*T3*tm))))
y.p <- nls(Y ~ y.a(tm,T1,T2,T3), data=dat, start=list(T1=T1.start, T2=T2.start, T3=T3.start))
y.p
dat
# Problem 3
# Clear workspace
rm(list=ls())
# Load packages
# if(!require("FrF2")){
#   install.packages("FrF2", dependencies = T); library(FrF2)}
# Enter data
tm <- c(0.25, 0.5, 1.0, 1.3, 1.8, 2.0, 2.6, 3.0, 4.0, 5.0, 6, 8.0, 9, 9.5, 10, 11, 13)
Y <- c(0.5, 1, 1.1, 1.5, 2.1, 2.5, 3.0, 3.5, 4.4, 6.5, 9, 13.5, 15, 15.5, 16, 16.2, 17)
dat <- data.frame(cbind(tm, Y))
# a. Plot the raw data
# windows()
plot(Y ~ tm, data = dat, pch = 19, xlim = c(0,14), ylim = c(0, 18),
xaxs = 'i', yaxs = 'i',
xlab = 'Time', ylab = 'Algae Concentration')
# b. Get parameter estimates. Explained in handout 'Use of derivatives in R'
# Theta 1: If t approaches infinity, T1 is approximately equal to the largest Y value
T1.start <- max(dat$Y)
T2.start <- 2.302
T3.start <- 1/(T1.start*T2.start)
# c. Estimate T1, T2, and T3.
# Enter formula
frm1 <- Y ~ T1 - (T1+T2)/(1+T2/T1*exp((T1+T2)*T3*tm))
# Run nls analysis to determine model coefficients
nls.frm1 <- nls(formula = frm1, data = dat, start = list(T1 = T1.start, T2 = T2.start, T3 = T3.start))
summary(nls.frm1)
nls.frm1$m$resid()
dat
# Load packages
if(!require("nlstools")){
install.packages("nlstools", dependencies = T); library(nlstools)}
nlsResiduals(nls.frm1)
nlsResiduals(nls.frm1, which = 1)
dat.res <- nlsResiduals(nls.frm1)
windows()
plot(dat.res, which = 0)
plot(dat.res, which = 0, pch = 19, col = 'steelblue3')
plot(dat.res, which = 0, pch = 19)
plot(dat.res, which = 1, pch = 19)
plot(dat.res, which = 5)
plot(dat.res, which = 6)
plot(dat.res, which = 0, pch = 19)
cr=nlsContourRSS(nls.frm1,lseq=200,exp=1.5)
plot(cr, nlev = 0, col = T)
plot(cr, nlev = 0, col = F)
?nlsContourRSS
initLogis <- function(mCall, data, LHS) {
xy <- data.frame(sortedXyData(mCall[["input"]], LHS, data))
if(nrow(xy) < 4)
stop("too few distinct input values to fit a logistic model")
z <- xy[["y"]]
## transform to proportion, i.e. in (0,1) :
rng <- range(z); dz <- diff(rng)
z <- (z - rng[1L] + 0.05 * dz)/(1.1 * dz)
xy[["z"]] <- log(z/(1 - z))		# logit transformation
aux <- coef(lm(x ~ z, xy))
pars <- coef(nls(y ~ 1/(1 + exp((xmid - x)/scal)),
data = xy,
start = list(xmid = aux[[1L]], scal = aux[[2L]]),
algorithm = "plinear"))
setNames(pars[c(".lin", "xmid", "scal")], nm = mCall[c("Asym", "xmid", "scal")])
}
SSlogis <- selfStart(~ Asym/(1 + exp((xmid - x)/scal)),
initial = initLogis,
parameters = c("Asym", "xmid", "scal"))
sslogis
SSlogis
# Problem 2
# Clear workspace
rm(list=ls())
# Load packages
if(!require("nlstools")){
install.packages("nlstools", dependencies = T); library(nlstools)}
# Enter data
tm <- rep(c(0.1, 0.5, 1.0, 1.5, 2.0, 3.0, 4.0), 5)
rc.10 <- c(94, 74, 54, 40, 30, 16, 9)
rc.20 <- c(90, 61, 37, 22, 14, 5, 2)
rc.25 <- c(88, 53, 28, 15, 8, 2, NA)
rc.30 <- c(85, 44, 20, 9, 4, 1, NA)
rc.40 <- c(77, 27, 7, 2, NA, NA, NA)
C <- c(rc.10, rc.20, rc.25, rc.30, rc.40)
Temp <- c(rep(10,7),rep(20,7),rep(25,7),rep(30,7),rep(40,7))
dat <- data.frame(cbind(tm, Temp, C))
# Remove NA values
dat <- dat[which(!is.na(dat$C)),]
# Create models
frm1 <- C ~ Co*exp(-kr*T1^(Temp-20)*tm)
frm2 <- C ~ Co*exp(-A*exp(E/(R*Temp)*tm))
dat
selfStart(~ Co*exp(-A*exp(E/(R*Temp)*tm)), initial = dat, parameters = c('Co', 'A', 'E', 'R'))
getInitial(C ~ SSfrm2(Co, A, E, R), data = dat)
SSfrm2 <- selfStart(~ Co*exp(-A*exp(E/(R*Temp)*tm)), initial = dat, parameters = c('Co', 'A', 'E', 'R'))
getInitial(C ~ SSfrm2(Co, A, E, R), data = dat)
# -------------------------------------------------------------------------- #
# Problem 2
# Clear workspace
rm(list=ls())
# Load packages
if(!require("nlstools")){
install.packages("nlstools", dependencies = T); library(nlstools)}
# Enter data
tm <- rep(c(0.1, 0.5, 1.0, 1.5, 2.0, 3.0, 4.0), 5)
rc.10 <- c(94, 74, 54, 40, 30, 16, 9)
rc.20 <- c(90, 61, 37, 22, 14, 5, 2)
rc.25 <- c(88, 53, 28, 15, 8, 2, NA)
rc.30 <- c(85, 44, 20, 9, 4, 1, NA)
rc.40 <- c(77, 27, 7, 2, NA, NA, NA)
C <- c(rc.10, rc.20, rc.25, rc.30, rc.40)
Temp <- c(rep(10,7),rep(20,7),rep(25,7),rep(30,7),rep(40,7))
dat <- data.frame(cbind(tm, Temp, C))
# Remove NA values
dat <- dat[which(!is.na(dat$C)),]
# Create models
frm1 <- C ~ Co*exp(-kr*T1^(Temp-20)*tm)
frm2 <- C~C0*exp(-A*exp(E/(R*(Temp+273.15)))*tm)
# Form 2 Analysis
# Convert °C to Kelvin for model
dat$TempK <- dat$Temp + 273.15
# nls analysis
R <- 1.987
nls.frm2 <- nls(frm2, data=dat ,start=list(C0=100,A=2.e6,E=-9000))
#Alternative version with kelvin temp data
frm2.2 <- C~C0*exp(-A*exp(E/(R*(TempK)))*tm)
nls.frm2.2 <- nls(frm2.2, data=dat ,start=list(C0=100,A=2.e6,E=-9000))
nls.frm2
(10*8) + (11.75*4)
170+127+128
170/425
128/425
127/425
128*0.5
0.05*128
0.10*128
0.20*128
0.40*128
6+6+25+12+51+12+12
.4 + .4 + .6 + .8 + .2 + .8 +.8
2.75+(2.75-1.6)
# Expected errors given as standard deviations
sd.Q = 0.02
sd.Q
require(FrF2)
options(digits=5)
options(digits=5)
nRep <- 3
a <-8
b<-4
ws.ff <- FrF2(a,b,factor.names=c('A','B','C','D'),
randomize=F,replications=nRep,blocks=1, generators = 'ABC')
ws.ff$A <- as.numeric(as.character(ws.ff$A))
ws.ff$B <- as.numeric(as.character(ws.ff$B))
ws.ff$C <- as.numeric(as.character(ws.ff$C))
ws.ff$D <- as.numeric(as.character(ws.ff$D))
ws.dm <- as.data.frame(attr(ws.ff,'desnum')[,1:4])
names(ws.dm) <- c('Driver','Country','Technology','Cylinder')
ws.aug <- ws.dm
ws.aug[,5] <- ws.aug[,1]*ws.aug[2]
ws.aug[,6] <- ws.aug[,1]*ws.aug[3]
ws.aug[,7] <- ws.aug[,2]*ws.aug[3]
names(ws.aug)[5:7] <- c('Driver:Country=Technology:Cylinder','Driver:Technology=Country:Cylinder','Country:Technology=Driver:Cylinder')
ws.mat <- as.matrix(ws.aug)
R1 <- c(15.72,113.69,5.84,99.50,50.72,199.83,24.50,80.60)
R2 <- c(7.40,73.89,5.76,59.53,29.24,121.74,9.09,75.88)
R3 <- c(7.45,79.56,6.50,64.29,26.32,116.91,8.45,74.23)
ws.dm$Ammonia <- c(R1,R2,R3)
ws.dm$log.Ammonia <- log(ws.dm$Ammonia)
ws.lm <- lm(log.Ammonia~(Driver+Country+Technology+Cylinder)^2,data=ws.dm)
summary(ws.lm)
par(las=1,tcl=.25)
MEPlot(ws.lm)
IAPlot(ws.lm)
Incin.aov <- aov(Ammonia~(Driver+Country+Technology+Cylinder)^2,data=ws.dm)
summary(Incin.aov)
Q.sd <- 0.02
X.sd <- 100
S.sd <- 2
S0.sd <- 20
# Clear workspace
rm(list=ls())
# Load packages
# if(!require("FrF2")){
#   install.packages("FrF2", dependencies = T); library(FrF2)}
# Enter given data
Q.sd <- 0.02
X.sd <- 100
S.sd <- 2
S0.sd <- 20
S0.mean <- 200
X.mean <- 2000
Q.mean <- 1
S.mean <- 20
V <- 1
((S0.mean - S.mean)*Q.mean)/(S.mean*X.mean*V)
O.theta <- ((S0.mean - S.mean)*Q.mean)/(S.mean*X.mean*V)
# ---------------------------------------------------------------------------- #
# Example Ch49 - Transmission of error
# Clear workspace
rm(list=ls())
# Load packages
# if(!require("FrF2")){
#   install.packages("FrF2", dependencies = T); library(FrF2)}
# Enter given data
Q.sd <- 0.02
X.sd <- 100
S.sd <- 2
S0.sd <- 20
S0.mean <- 200
X.mean <- 2000
Q.mean <- 1
S.mean <- 20
V <- 1
# Calculate O.theta
O.theta <- ((S0.mean - S.mean)*Q.mean)/(S.mean*X.mean*V)
k.mean <- O.theta
S0.theta <- Q.mean / (S.mean*X.mean*V)
Q.mean / (S.mean*X.mean*V)
(-1*Q.mean)/(S.mean*X.mean*V)
(S0.mean - S.mean)/(S.mean*(X.mean^2)*V)
(S0.mean - S.mean)/(S.mean*X.mean*V)
# ---------------------------------------------------------------------------- #
# Example Ch49 - Transmission of error
# Clear workspace
rm(list=ls())
# Load packages
# if(!require("FrF2")){
#   install.packages("FrF2", dependencies = T); library(FrF2)}
# Enter given data
Q.sd <- 0.02
X.sd <- 100
S.sd <- 2
S0.sd <- 20
S0.mean <- 200
X.mean <- 2000
Q.mean <- 1
S.mean <- 20
V <- 1
# Calculate O.theta
O.theta <- ((S0.mean - S.mean)*Q.mean)/(S.mean*X.mean*V)
k.mean <- O.theta
# Calculate other coefficients
S0.theta <- Q.mean / (S.mean*X.mean*V)
S.theta <- (-1*Q.mean)/(S.mean*X.mean*V)
X.theta <- (S0.mean - S.mean)/(S.mean*(X.mean^2)*V)
Q.theta <- (S0.mean - S.mean)/(S.mean*X.mean*V)
((S0.theta^2)*(S0.sd^2)) + ((S.theta^2)*(S.sd^2)) + ((X.theta^2)*(X.sd^2)) + ((Q.theta^2)*(Q.sd^2))
k.var <- ((S0.theta^2)*(S0.sd^2)) + ((S.theta^2)*(S.sd^2)) + ((X.theta^2)*(X.sd^2)) + ((Q.theta^2)*(Q.sd^2))
sqrt(k.var)
k.sd <- sqrt(k.var)
k.var / ((S0.theta^2)*(S0.sd^2))
((S0.theta^2)*(S0.sd^2))
((S0.theta^2)*(S0.sd^2)) / k.var
((S.theta^2)*(S.sd^2)) / k.var
S0.perVar <- (((S0.theta^2)*(S0.sd^2)) / k.var) * 100
S.perVar <- (((S.theta^2)*(S.sd^2)) / k.var) * 100
X.perVar <- (((X.theta^2)*(X.sd^2)) / k.var) * 100
Q.perVar <- (((Q.theta^2)*(Q.sd^2)) / k.var) * 100
Q.perVar
0.0045-0.0011
6+6+26+13+51+13+13
4+6+13+30+13+13
4+6+13+30+13+13+26
6+4+26+13+30+13+13
128-23
105/128
110/128
6+6+24+13+51+12+13
.7*128
90/128
6+4+26+13+35+13+13
128-90
# Course: CEE 6410
# Final project results plotting
# Author: Greg Goodrum
# Last Update: 12/8/2020
# -------------------------------------------------------------------------- #
# Data and workspace setup
# Clear workspace
rm(list=ls())
# Load packages
# if(!require("NADA")){
#   install.packages("NADA", dependencies = T); library(NADA)}
# Load data
setwd('c:/Users/A02290896/Documents/Coursework/CEE_6410_Goodrum/Project/Results/Output_data/')
barr.rmv <- read.csv('barriers_removed.csv', header = T)
ecoLoss <- read.csv('economicloss.csv', header = T)
qualLen <- read.csv('quality_length.csv', header = T)
spent <- read.csv('spent.csv', header = T)
# Add budgets to output tables
scensNums <- seq(1,22,1)
for(i in 1:length(scensNums)){
scensNums[i] <- paste0('S', as.character(scensNums[i]))
}
budgets <- c(50000, 100000, 200000, 300000, 500000, 750000, 1000000, 1500000, 5000000,
10000000, 20000000, 30000000, 50000000, 70000000, 80000000, 90000000,
100000000, 150000000, 200000000, 250000000, 300000000, 350000000)
budScens <- setNames(as.data.frame(cbind(scensNums, budgets)),
c('Scenario', 'Budget'))
budScens$budMils <- as.numeric(budScens$Budget)/1000000
addBudget <- function(inTable, inBudget){
Budget <- rep(NA, nrow(inTable))
out <- as.data.frame(cbind(inTable, Budget))
for(i in 1:nrow(inTable)){
out$Budget[i] <- inBudget$budMils[which(inBudget$Scenario == out$Scenario[i])]
}
return(out)
}
barr.rmv <- addBudget(barr.rmv, budScens)
ecoLoss <- addBudget(ecoLoss, budScens)
qualLen <- addBudget(qualLen, budScens)
spent <- addBudget(spent, budScens)
# Add barrier names to barrier table
barrNums <- seq(550, 560, 1)
barrNames <- c('GSL', 'Daniels', 'Devil Creek', 'Deep Creek', 'Weston', 'Five Mile',
'Cutler', 'Oneida', 'Grace', 'Soda Springs', 'Montpelier')
barriers <- setNames(as.data.frame(cbind(barrNums, barrNames)),
c('BarrID', 'Name'))
addBarrier <- function(inTable, inBarriers){
Barrier_Name <- rep(NA, nrow(inTable))
out <- as.data.frame(cbind(inTable, Barrier_Name))
for(i in 1:nrow(inTable)){
out$Barrier_Name[i] <- inBarriers$Name[which(inBarriers$BarrID == out$Barrier[i])]
}
return(out)
}
barr.rmv <- addBarrier(barr.rmv, barriers)
# Convert scarcity to millions
ecoLoss$WscarMils <- as.numeric(ecoLoss$Wscarc_cost / 1000000)
qualLen
ecoLoss
qualLen$Scarcity <- NA
for(i in 1:nrow(qualLen)){
qualLen$Scarcity[i] <- 0
}
qualLen
for(i in 7:nrow(qualLen)){
qualLen$Scarcity[i] <- ecoLoss$WscarMils[which(ecoLoss$Scenario) == qualLen$Scenario[i]]
}
for(i in 7:nrow(qualLen)){
qualLen$Scarcity[i] <- ecoLoss$WscarMils[which(ecoLoss$Scenario == qualLen$Scenario[i])]
}
ecoLoss
qualLen
# Plot barriers removed
windows()
par(mar=c(5,10,1,1))
plot(Scarcity ~ QL_Recon, data = qualLen, pch = 19, xlim = c(0,800), ylim = c(0, 10), cex = 1.25,
xlab = 'Reconnected habitat (km)', ylab = 'Water scarcity cost (Millions $)')
plot(Scarcity ~ QL_Recon, data = qualLen, pch = 19, xlim = c(0,800), ylim = c(0, 10), cex = 1.25,
xlab = 'Reconnected habitat (km)', ylab = 'Water scarcity cost (Millions $)', xaxs = 'i', yaxs = 'i')
plot(Scarcity ~ QL_Recon, data = qualLen, pch = 19, xlim = c(0,800), ylim = c(0, 10), cex = 1.25,
xlab = 'Reconnected habitat (km)', ylab = 'Water scarcity cost (Millions $)')
